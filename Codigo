!pip install tensorflow pandas numpy scikit-learn

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv1D, Flatten, MaxPooling1D
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/pregnancy_risk_data.csv')

df['last_period_date'] = pd.to_datetime(df['last_period_date'])
reference_date = pd.Timestamp('2024-01-01')
df['days_since_last_period'] = (df['last_period_date'] - reference_date).dt.days

X = df[['age', 'weight', 'height', 'cycle_duration', 'medical_history', 'days_since_last_period']]
y = df['risk']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train_scaled = X_train_scaled.reshape((X_train_scaled.shape[0], X_train_scaled.shape[1], 1))
X_test_scaled = X_test_scaled.reshape((X_test_scaled.shape[0], X_test_scaled.shape[1], 1))

model = Sequential([
    Conv1D(32, 3, activation='relu', input_shape=(X_train_scaled.shape[1], 1)),
    MaxPooling1D(2),
    Conv1D(64, 3, activation='relu'),
    MaxPooling1D(2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train_scaled, y_train, epochs=50, validation_split=0.2, batch_size=32)

loss, accuracy = model.evaluate(X_test_scaled, y_test)
print(f'Accuracy: {accuracy * 100:.2f}%')

model.save('/content/drive/MyDrive/pregnancy_risk_cnn_model.h5')

model = tf.keras.models.load_model('/content/drive/MyDrive/pregnancy_risk_cnn_model.h5')

new_data = np.array([[30, 70, 165, 28, 0, -365]])
new_data_scaled = scaler.transform(new_data)
new_data_scaled = new_data_scaled.reshape((new_data_scaled.shape[0], new_data_scaled.shape[1], 1))

risk_prediction = model.predict(new_data_scaled)
risk_prediction = (risk_prediction > 0.5).astype(int)
print(f'Riesgo de embarazo: {"Alto" if risk_prediction[0][0] == 1 else "Bajo"}')
